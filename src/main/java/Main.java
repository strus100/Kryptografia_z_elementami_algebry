import modul1.*;
import modul2.CurvePoint;
import modul2.EllipseCurve;

import java.math.BigInteger;
import java.security.*;
import java.util.ArrayList;

public class Main {

    public static void main(String[] args) throws NoSuchAlgorithmException {

        for (int i = 0; i <= 683; i++) {
            BigInteger x = BigInteger.valueOf(421).multiply(BigInteger.valueOf(i)).remainder( BigInteger.valueOf( 683 ));

            if(x.compareTo( BigInteger.ONE ) == 0 ) {
                System.out.println(i);
            }
        }
        /*

//        for (int i = 301; i < 10000 ; i++) {
            long startTime = System.nanoTime();


            System.out.println("+++++++++++++++++++++ ");
//            System.out.println( 300 );


        EllipseCurve ellipseCurve = new EllipseCurve( 3 );

        CurvePoint p = ellipseCurve.generatePointInCurve();
        CurvePoint q = ellipseCurve.generatePointInCurve();

        ellipseCurve.isPointInCurve( p );
        ellipseCurve.isPointInCurve( q );


        CurvePoint w1 = ellipseCurve.add( p , q );
        CurvePoint w2  = ellipseCurve.add( p );

        if( !ellipseCurve.isPointInCurve( w1 ) ) {
            System.out.println("p+q");
            System.out.println( ellipseCurve.toString() );

            System.out.println( p.toString() );
            System.out.println( q.toString() );
            System.out.println( w1.toString() );
        }

         if( !ellipseCurve.isPointInCurve( w2 ) ) {
             System.out.println("p+p");
             System.out.println( ellipseCurve.toString() );
             System.out.println( p.toString() );
             System.out.println( w2.toString() );
         }


            System.out.println("Done");

        long endTime = System.nanoTime();
        long duration = (endTime - startTime) /1000000000;
        System.out.println("Time of execution: " + duration + " seconds.");
/*
//        }

        //
//
//       /*BigInteger b = new BigInteger("64324265231195561707616758201408799511927285566214953422035518355428424728826761985026423496920549371281634656997132069955513640879895387861059029009556857261716286782438989965684130381577283666363409588758594014124496450381808734577318011983574542541017473444951074223901046919832873721929265313798513062016954099651648437105929108365016250588321618088171596674902797635689889068216004584401147559153452207994375763209460780258543005473367258489549997581851961488462525595874485756370106500801132105677526839183775502762441536589028603897355843519059298015309399904158869885615548746642813969338685650");
//       BigInteger k = new BigInteger("56988850542311732561609961394500488005602613345837194792854541681928782873582201765674104848872571787744161826747328373705961469283987181190341417050202984600580689803062785778296590846461671145287325720699070221864233074466171276677721626970383046326129289710739362053449103122233562385142435494376674062959553687412344210611625759234480915280915593280400411272780503006968751134218873168443871552322502767471357996239419324783689356529268017104334439215501683736507192890349620139995646397066348229031818300109819260731122022559615709071186441350403892520070085466787371259750216203935976308832336019");
//       BigInteger n = new BigInteger("97783110388766157605971801718794075001803316407437855673003242016993987089017485614107555306108152561598241997963308530627778263820203167150724058099470406585657209997178520809769351560561277662504894066387201415074234267484404268654920259747945961519205375460341757431221815891338043846964418200867770183011226255815314842462963097744829084408834988649788423543811701304355865804581953854154467532847463840387875910015717062714244959856355364369560123697939985168802037628072867996121487330414842011398971573893412811641309011876730584550942697462445872324976454955827475990466595234993272694302418882");
//
//       System.out.println(module1Fasade.bit_pow(b, k , n));
//*/
//
//        BigInteger b = new BigInteger("62139938311606852985409567916742509259641015745482632451803478463887141948325103929109416723933330693674487938852889857186018392643094825161403697917267303537102126418641971319035196338637161494301424202814034333614684985704869190409701953849866155867004571226442827684234317562756074385814611044484001031274669548695023131434666915590046571527714333329901609529729622803327316509216494571178216564272686506945515352749716996264009428363144788566827645304124949164502775862378697025028765669476304616890185266117894961426541090935983933868856369982036385461842053791791028222920884052107699560771043917");
//        BigInteger n = new BigInteger("113890477486269979158039430213366884403429544778203348367980821476585682287139730728883317711389983371082590144795914769132571767697525982442526024926094362033398367032443490237092844155029396949762834168406769208583367710254814380995501595277311502430980025665924129268684327360766006912152449313391646037533758883955970777485437210379574737545617563500287611008143804080224383498849932056070986414361795489061865552375588757247929879764699118329104308533633980621915818475378766986915473547539677467287973895111227562737872289574246833907771312795861260733241617161651279868818948521183413362489329870");
//
//        System.out.println( module1Fasade.reverse(b, n) );
//
//    /*    long startTime1 = System.nanoTime();
//
//        Elgamal elgamal = new Elgamal();
//        elgamal.algOne(2000, 10000);
//        long endTime1 = System.nanoTime();
//        long duration1 = ( endTime1 - startTime1 ) /1000000000;
//        System.out.println("Time of execution: " + duration1 + " seconds.");
//
//
//        long startTime = System.nanoTime();
//        RSA rsa = new RSA(2000);
//        BigInteger c = rsa.encrypt(BigInteger.valueOf(54321));
//        System.out.println( rsa.decrypt(c) );
//
//        long endTime = System.nanoTime();
//        long duration = (endTime - startTime) /1000000000;
//        System.out.println("Time of execution: " + duration + " seconds.");
//*/
//
///*        Factoryzation factoryzation = new Factoryzation();
//        BigInteger n = new BigInteger("4205142842144491469901035779943007321473952670460614909740188710462796861921791780746014298824348546889748863603913825380912304112461129061114480661500416910991853573649055897001583708234998530660447745535711467407798340361335928981312718926721467943464464347521000503179497153112764130114342341251457556854374337702225661788558784747007799183865452550277915792606190524979919835785502848268656744723582283945123371679980696891117277548547543492116459573915049465031893477375432302554045103150951955486083526016584926750095118984741954481489582827589374811855794969993254570253121737541317841105374871");
//        BigInteger e = new BigInteger("2219702669760051625529760071259189046161364151701596790770763259600544290997125107128138578832480323854037838605599695123440903054424577956799678397891626783444723950147784407335462559143107157658471735164714153971357443698994082727673072343180069044835094856719244582969485137575845153825021391095268519544748057926663150576101990156077844973202826679622719216615756960610764785110408304311098865781072786879379296360025429207038042833064515876868608188436266546466015175298619766069707237580766787423687287858279125035537409323009740621048068813783768774814593993312720811077575752373741693972477513");
//        BigInteger d = new BigInteger("9738454175598488918517912045396815318351885031131011603301149540233201870415928124228184903947308481461717153640402767289853198952704967449300122329014740408508653613839688094250923162490670540988214688775753190900423588412005697560323304500348114898045236656807283167901253083798426709790746938525240264995502098847606530252043043212677911465343705421183831116604350283789270965024124861992541018116786274867535581082248878546385006259988838129620903989258127062367035340066868353921340378027331177496332241490297041686454303452932424111634076797215417394272455217584601075851777273706083879476230809");
//        System.out.println( factoryzation.factoryzation(n, e, d) );
//*/    }
    }
}
